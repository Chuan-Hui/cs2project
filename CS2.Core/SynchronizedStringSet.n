using System;
using System.Collections;
using System.Collections.Generic;
using Wintellect.PowerCollections;

namespace CS2.Core
{
    public class SynchronizedStringSet : ISynchronizedStringSet
    {
        mutable set : Set[string];
        syncLock = object();

        public this()
        {
            set = Set.[string](StringComparer.InvariantCultureIgnoreCase);
        }

        private this(inner : Set[string])
        {
            set = inner;
        }

        #region ISynchronizedStringSet Members

        public Add(item : string) : bool
        {
            lock(syncLock)
                set.Add(item);
        }

        public Clear() : void
        {
            lock(syncLock)
                set.Clear();
        }

        public Count : int
        {
            get { set.Count; }
        }

        public CloneAndClear() : ISynchronizedStringSet
        {
            lock(syncLock)
            {
                def clone = SynchronizedStringSet(set.Clone());
                set.Clear();
                clone;
            }
        }

        /// <summary>
        /// Returns an enumerator that iterates through the collection.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
        /// </returns>
        public GetEnumerator() : IEnumerator[string]
        {
            set.GetEnumerator();
        }

        public Remove(item : string) : bool
        {
            lock(syncLock)
                set.Remove(item);
        }

        ///<summary>
        ///Returns an enumerator that iterates through a collection.
        ///</summary>
        ///
        ///<returns>
        ///An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
        ///</returns>
        ///<filterpriority>2</filterpriority>
        IEnumerable_GetEnumerator() : IEnumerator implements IEnumerable.GetEnumerator
        {
            GetEnumerator();
        }

        #endregion
    }
}