using System.Collections.Generic;
using System.IO;
using System.Threading;
using CS2.Core.Analysis;
using CS2.Core.Parsing;
using CS2.CSharp.Analysis;
using DDW;
using DDW.Collections;
using Lucene.Net.Documents;
using Nemerle.Utility;

namespace CS2.CSharp.Parsing
{
    public class CSharpParsingService : IParsingService
    {
        [Accessor] analyzer : AbstractAnalyzer;
        parsingVisitor : CSharpParsingVisitor;

        public this()
        {
            parsingVisitor =  CSharpParsingVisitor();
            analyzer = CSharpAnalyzer();
        }
        
        public SupportedFileExtensions : IEnumerable[string]
        {
            get { array[".cs"] }
        }

        public LanguageName : string
        {
            get { "c#" }
        }

        public TryParse(file : FileInfo, document : out Document) : bool
        {
            try
            {
                document = Document();
                def parser = Thread(Parse);
                parser.Start((file, document));

                if(parser.Join(2000))
                    document.GetFields().Count > 1             
                else {
                    parser.Abort();
                    false
                }
            }
            catch {
                _ => { document = null; false }
            }
        }

        private Parse(data : object) : void
        {
            def (file, document) = data :> FileInfo * Document;

            try
            {
                def (lexer, tokens) = LexAndTokenize(file);
                
                def parser = Parser(file.FullName);

                def compilationUnitNode = parser.Parse(tokens, lexer.StringLiterals);

                _ = compilationUnitNode.AcceptVisitor(parsingVisitor, document);
            }
            catch
            {
                | _ => ()
            }
        }
        
        private LexAndTokenize(file : FileInfo) : Lexer * TokenCollection 
        {
            using(stream = File.Open(file.FullName, FileMode.Open, FileAccess.Read))
            using(reader = StreamReader(stream)) 
            {
                def lexer = Lexer(reader);
                (lexer, lexer.Lex())
            }
        }
    }
}