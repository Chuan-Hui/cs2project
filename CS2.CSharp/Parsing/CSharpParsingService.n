using System.Collections.Generic;
using System.IO;
using System.Threading;
using CS2.Core.Analysis;
using CS2.Core.Parsing;
using CS2.CSharp.Analysis;
using DDW;
using DDW.Collections;
using Lucene.Net.Documents;

namespace CS2.CSharp.Parsing
{
    public class CSharpParsingService : IParsingService
    {
        analyzer : AbstractAnalyzer;
        parsingVisitor : CSharpParsingVisitor;

        public this()
        {
            parsingVisitor =  CSharpParsingVisitor();
            analyzer = CSharpAnalyzer();
        }

        public TryParse(file : FileInfo, document : out Document) : bool
        {
            document = Document();

            try
            {
                def parser = Thread(Parse);
                parser.Start(array [file : object, document : object]);

                if(parser.Join(2000)) {
                    // Too few fields found, this is probably not a C# file
                    document.GetFields().Count > 1;              
                }
                else {
                    parser.Abort();
                    false;
                }
            }
            catch {
                _ => { document = null; false; }
            }
        }

        public SupportedFileExtensions : ICollection[string]
        {
            get { array[".cs"]; }
        }

        public LanguageName : string
        {
            get { "c#"; }
        }

        public Analyzer : AbstractAnalyzer
        {
            get { analyzer; }
        }

        private Parse(data : object) : void
        {
            def bag = data :> array[object];

            def file = bag[0] :> FileInfo;
            def document = bag[1] :> Document;

            mutable tokens : TokenCollection;

            try
            {
                mutable lexer;
                
                using(fileStream = FileStream(file.FullName, FileMode.Open, FileAccess.Read))
                using(reader = StreamReader(fileStream, true)) {
                    lexer = Lexer(reader);
                    tokens = lexer.Lex();
                }

                def parser = Parser(file.FullName);

                def compilationUnitNode = parser.Parse(tokens, lexer.StringLiterals);

                _ = compilationUnitNode.AcceptVisitor(parsingVisitor, document);
            }
            catch
            {
                | _ => { when(tokens != null) tokens.Clear(); }
            }
        }
    }
}